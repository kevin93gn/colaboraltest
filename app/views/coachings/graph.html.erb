
<%= simple_form_for(@graph, url: coaching_graph_path(:coaching_id => @graph.coaching_id, :user_id => @graph.user_id), html: { method: :put,  autocomplete: 'off' }) do |f| %>
    <%= f.error_notification %>
    <section id="wizard_bg">
      <div class="container">
        <div id="survey_container">
          <div id="middle-wizard">
            <div class="step">
              <div class="row">
                <h3 class="col-md-9"><i class="icon-chart-line"></i> Gr&aacute;fico : <b><%=@graph.user.full_name%></b></h3>
                <div class="col-md-3">
                  <%= link_to coachees_path(:coaching_id => @graph.coaching_id),  :class => 'button_medium pull-right' do%>
                      <i class="icon-level-up"></i> Volver
                  <%end%>
                </div>
                <div id="chart_coachee" class="ct-chart" ></div>
                <div class="col-md-6">
                  <ul class="data-list">
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> A</label>
                        <%= f.input :point_1, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 1' %>
                        <%= f.input :id, :as => :hidden, :input_html => { :value => @graph.id } %>
                      </div>
                    </li>
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> B</label>
                        <%= f.input :point_2, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 2' %>
                      </div>
                    </li>
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> C</label>
                        <%= f.input :point_3, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 3' %>
                      </div>
                    </li>
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> D</label>
                        <%= f.input :point_4, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 4' %>
                      </div>
                    </li>
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> E</label>
                        <%= f.input :point_5, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 5' %>
                      </div>
                    </li>
                  </ul>
                </div><!-- end col-md-6 -->

                <div class="col-md-6">
                  <ul class="data-list" style="margin:0; padding:0;">
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> F</label>
                        <%= f.input :point_6, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 6' %>
                      </div>
                    </li>
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> G</label>
                        <%= f.input :point_7, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 7' %>
                      </div>
                    </li>
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> H</label>
                        <%= f.input :point_8, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 8' %>
                      </div>
                    </li>
                    <li>
                      <div class="form-group">
                        <label><i class=" icon-dot"></i> I</label>
                        <%= f.input :point_9, :as => 'string', required: true, :input_html => {:class => 'required form-control'}, :label => false, :placeholder => 'Punto 9' %>
                      </div>
                    </li>
                  </ul>
                </div><!-- end col-md-6 -->
              </div><!-- end row -->
            </div><!-- end step-->
          </div><!-- end middle-wizard -->
          <div id="bottom-wizard">
            <div><%= f.button :submit, 'Actualizar', :class => 'button_medium' %></div>

          </div><!-- end bottom-wizard -->
        </div><!-- end Survey container -->
      </div>
    </section><!-- end section main container -->
<% end %>

<script>
    var chart = new Chartist.Line('#chart_coachee', {
        labels: ['Orientaci&oacute;n al Logro', 'Iniciativa', 'Impacto e Influencia', 'Acci&oacute;n Directiva/Asertividad', 'Desarrollo de otros', 'Trabajo en Equipo', 'Comprensi√≥n Interpersonal', 'Pensamiento Conceptual', 'Liderazgo de Equipo'],
        series: [
            <% unless @graph.nil? %>
                <%="[#{@graph.point_1}, #{@graph.point_2}, #{@graph.point_3}, #{@graph.point_4}, #{@graph.point_5}, #{@graph.point_6}, #{@graph.point_7}, #{@graph.point_8}, #{@graph.point_9}]" %>
            <% end %>
        ]
    }, {
        high: 4,
        low: 0,
        showArea: true,
        showPoint: true,
        fullWidth: true,
        lineSmooth: Chartist.Interpolation.none(),
    });

    // Let's put a sequence number aside so we can use it in the event callbacks
    var seq = 0,
            delays = 40,
            durations = 150;

    // Once the chart is fully created we reset the sequence
    chart.on('created', function() {
        seq = 0;
    });

    // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
    chart.on('draw', function(data) {
        seq++;

        if(data.type === 'line') {
            // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
            data.element.animate({
                opacity: {
                    // The delay when we like to start the animation
                    begin: seq * delays + 1000,
                    // Duration of the animation
                    dur: durations,
                    // The value where the animation should start
                    from: 0,
                    // The value where it should end
                    to: 1
                }
            });
        } else if(data.type === 'label' && data.axis === 'x') {
            data.element.animate({
                y: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.y + 100,
                    to: data.y,
                    // We can specify an easing function from Chartist.Svg.Easing
                    easing: 'easeOutQuart'
                }
            });
        } else if(data.type === 'label' && data.axis === 'y') {
            data.element.animate({
                x: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 100,
                    to: data.x,
                    easing: 'easeOutQuart'
                }
            });
        } else if(data.type === 'point') {
            data.element.animate({
                x1: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                },
                x2: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                },
                opacity: {
                    begin: seq * delays,
                    dur: durations,
                    from: 0,
                    to: 1,
                    easing: 'easeOutQuart'
                }
            });
        } else if(data.type === 'grid') {
            // Using data.axis we get x or y which we can use to construct our animation definition objects
            var pos1Animation = {
                begin: seq * delays,
                dur: durations,
                from: data[data.axis.units.pos + '1'] - 30,
                to: data[data.axis.units.pos + '1'],
                easing: 'easeOutQuart'
            };

            var pos2Animation = {
                begin: seq * delays,
                dur: durations,
                from: data[data.axis.units.pos + '2'] - 100,
                to: data[data.axis.units.pos + '2'],
                easing: 'easeOutQuart'
            };

            var animations = {};
            animations[data.axis.units.pos + '1'] = pos1Animation;
            animations[data.axis.units.pos + '2'] = pos2Animation;
            animations['opacity'] = {
                begin: seq * delays,
                dur: durations,
                from: 0,
                to: 1,
                easing: 'easeOutQuart'
            };

            data.element.animate(animations);
        }
    });

</script>